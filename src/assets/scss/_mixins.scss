@mixin container($max: $maxWidth, $margin: 2rem) {
	@content;
	max-width: $max;
	margin-right: $margin;
	margin-left: $margin;
	width: calc(100% - #{$margin * 2});
	@media (min-width: #{$max + ($margin*2)}) {
		margin-right: auto;
		margin-left: auto;
		width: 100%;
	}
}

@mixin verticalSpacing {
	padding-top: $gutter;
	padding-bottom: $gutter;

	@include mq(lg) {
		padding-top: $gutterLg;
		padding-bottom: $gutterLg;
	}
}

@mixin verticalSpacingSm {
	padding-top: $gutter;
	padding-bottom: $gutter;

	@include mq(lg) {
		padding-top: $gutter;
		padding-bottom: $gutter;
	}
}

@mixin background-fill($color) {
  color: choose-contrast-color($color);
  position: relative;
	&::before {
		content: '';
		z-index: -1;
		position: absolute;
		top: 0;
		left: 50%;
		bottom: 0;
		width: 100vw;
		transform: translateX(-50%);
		background: $color;
		mix-blend-mode: screen;
	}
}

@mixin background-image {
	position: relative;
	background-size: 0 0;
	background-position: 0 0;
	background-repeat: no-repeat;
	&::after {
		content: '';
		z-index: -2;
		position: absolute;
		top: 0;
		left: 50%;
		bottom: 0;
		width: 100vw;
		transform: translateX(-50%);
    background-color: $white;
    background-image: inherit;
		background-size: cover;
		background-position: 50% 50%;
	}
}

@mixin mq($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		@media (min-width: $breakpoint-value) {
			@content;
		}
	}
	@else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

@mixin mqdn($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		@media (max-width: $breakpoint-value - 1) {
			@content;
		}
	}
	@else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

/* 
create a fluid property value that adjusts from $min to $max, 
based on screen size (default $minWidth and $maxWidth in the _variables.scss)
example:
h1 {
  @include fluid(font-size, 2rem, 3rem);
  @include fluid(margin-bottom, 20px, 30px);
  @include fluid(padding-left, 0.5rem, 5rem, 900px, 1200px);
}
*/

// @mixin fluid($prop: false, $min, $max, $screenMin: $minWidth, $screenMax: $maxWidth) {
// 	@if not $prop {
// 		@error 'Please define a fluid property.';
// 	}

// 	$u1: unit($min);
// 	$u2: unit($max);
// 	$u3: unit($screenMin);
// 	$u4: unit($screenMax);

// 	@if $u1 != $u2 {
// 		@error 'Property units need to match.';
// 	}
// 	@if $u3 != $u4 {
// 		@error 'Screen size units need to match.';
// 	}
// 	@if $u1 != rem and $u1 != px or $u3 != rem and $u3 != px {
// 		@error 'Only rem or px units are allowed';
// 	}

// 	@if $u1 == px {
// 		$min: ($min / $rootEM) * 1rem;
// 		$max: ($max / $rootEM) * 1rem;
// 	}
// 	@if $u3 == px {
// 		$screenMin: ($screenMin / $rootEM) * 1rem;
// 		$screenMax: ($screenMax / $rootEM) * 1rem;
// 	}
// 	& {
// 		#{$prop}: $min;
// 		@media screen and (min-width: $screenMin) {
// 			#{$prop}: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{$screenMin}) / #{strip-unit($screenMax - $screenMin)}));
// 		}
// 		@media screen and (min-width: $screenMax) {
// 			#{$prop}: $max;
// 		}
// 	}
// }

//hide visually but leave for screenreaders
@mixin hideVisually {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	border: 0;
}

@mixin clean($el) {
  @if $el == button {
    cursor: pointer;
    appearance: none;
    border: none;
    background: none;
    box-shadow: none;
    border-radius: 0;
    padding: 0;
    margin: 0;
    text-decoration: none;
    touch-action: manipulation;
    &:hover {
      text-decoration: none;
    }
  }
  @else if $el == input {
    appearance: none;
    border: none;
    background: none;
    box-shadow: none;
    border-radius: 0;
    padding: 0;
    margin: 0;
    height: auto;
    width: auto;
  }
  @else if $el == list {
    list-style: none;
    margin: 0;
    padding: 0;
  }
}

@mixin iconStyle($fontFamily: 'Font Awesome 5 Free') {
	display: inline-block;
	vertical-align: -0.15em;
	line-height: 1;
	margin-right: 0.4em;
	font-weight: normal;
	speak: none;
	text-align: center;
	font-size: 120%;
	white-space: nowrap;
	word-wrap: normal;
	direction: ltr;
	-webkit-font-feature-settings: 'liga';
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-ms-font-feature-settings: 'liga';
	font-family: $fontFamily;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;
	text-rendering: auto;
	text-transform: none;
	line-height: 1;
	letter-spacing: normal;

	@media speech {
		display: none;
		visibility: hidden;
	}
}